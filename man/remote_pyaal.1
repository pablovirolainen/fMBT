.\" Process this file with
.\" groff -man -Tascii fmbt.1
.TH REMOTE_PYAAL 1 "Jan 2014" Linux "User Manuals"
.SH NAME
REMOTE_PYAAL \- execute AAL/Python models and adapters
.SH SYNOPSIS
.SY remote_pyaal
.OP \-c CODE
.OP \-D FLAG
.OP \-I DIR
.OP \-l LOGFILE
.OP \-t TIMEOUT
.OP \-o OUTFILE
.OP \-\-lsts\-depth D
.OP \-H VAR
.OP \-S VAR
\fIAALFILE\fR
.
.SY remote_pyaal
.B \-h
|
.B \-\-help
.SH DESCRIPTION
Loads and executes AALFILE that contains either AAL/Python or Python
as generated by the AAL compiler (\fBfmbt-aalc\fR). \fBremote_pyaal\fR
implements two operation modes.

If OUTFILE is defined, AALFILE is converted into a finite state
machine in LSTS format and written to OUTFILE. Options
\fB\-\-lsts\-depth\fR, \fB\-H\fR and \fB\-S\fR are effective only in
this mode.

If OUTFILE is not defined, execution of AALFILE is controlled using
fMBT's remote AAL protocol in \fBremote_pyaal\fR process' standard
input and output.

.SH OPTIONS
.TP
\fB\-h\fR, \fB\-\-help\fR
print help, then exit
.TP
.B \-c \fICODE\fR
CODE is executed in Python interpreter before loading AALFILE. Enables
setting test run specific values to global variables, for instance.
.TP
.B \-D \fIFLAG\fR
defines FLAG for AAL preprocessor (\fBfmbt-aalp\fR). AALFILE can
contain ^ifdef FLAG ... ^endif.
.TP
.B \-I \fIDIR\fR
adds DIR to include directories. AAL precompiler and compiler will
look for AALFILE and files imported with ^include from these
directories.
.TP
.B \-l \fILOGFILE\fR
log(msg) and fmbt.adapterlog(msg) calls in AAL/Python will write to
LOGFILE.
.TP
.B \-t \fITIMEOUT\fR
sets timeout for required output to TIMEOUT seconds
.TP
\fB\-o\fR \fIOUTFILE\fR
convert the model to a finite state machine and write it to
OUTFILE. If OUTFILE is \-, the result is written to standard output.
.TP
\fB\-\-lsts\-depth\fR \fID\fR
(OUTFILE mode) limit the depth of resulting finite state machine to D
transitions from the initial state
.TP
\fB\-H\fR \fIVAR\fR
(OUTFILE mode) hide AAL/Python variable VAR from resulting finite
state machine. States that differ only by values of hidden variables
are merged.
.TP
\fB\-S\fR \fIVAR\fR
(OUTFILE mode) show AAL/Python variable VAR in resulting finite state
machine: variable value will be visible in every state. Variables not
explicitly shown are be hidden.

.SH EXAMPLES
.nf
Using \fBremote_pyaal\fR in fMBT test configuration:

.B model = aal_remote(remote_pyaal -l/dev/null mymodel.aal)

.fi
Calling log(msg) and fmbt.adapterlog(msg) in AAL/Python will write to
/dev/null. \fBfmbt\fR controls executing model code in mymodel.aal
during test generation.

.nf
.B model = lsts_remote(remote_pyaal -o- --lsts-depth=30 mymodel.aal)

.fi
\fBremote_pyaal\fR converts mymodel.aal into a finite state machine
before test generation, enabling very fast test generation.

.nf
Using \fBremote_pyaal\fR without \fBfmbt\fR:

.B remote_pyaal -o- mymodel.aal | fmbt-view -

visualises AAL/Python in mymodel.aal as a finite state machine.

.B (echo mr; echo ma) | remote_pyaal mymodel.aal

executes the initial_state block in mymodel.aal ("mr" is model reset),
and then evaluates guards of actions and prints numbers of enabled
actions ("ma" lists enabled actions in model).

.SH AUTHOR
Written by Antti Kervinen.
.SH "REPORTING BUGS"
Report bugs to https://github.com/01org/fMBT/issues
.SH COPYRIGHT
Copyright \(co 2014 Intel Corporation.
.SH "SEE ALSO"
.BR fmbt (1)
.BR fmbt\-view (1)
.BR fmbt\-aalc (1)
.BR fmbt\-aalp (1)
.PP
AAL/Python language reference.
.br
\fIdoc/aal_python.txt\fR
