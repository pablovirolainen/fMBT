#!/usr/bin/env python
#
# fMBT, free Model Based Testing tool
# Copyright (c) 2011-2012, Intel Corporation.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms and conditions of the GNU Lesser General Public License,
# version 2.1, as published by the Free Software Foundation.
#
# This program is distributed in the hope it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

"""
fMBT log tool

Usage: fmbt-log [options] [logfile...]

Options:
  -o, --output=<file>
          output will be written to given file. Default: the standard
          output.

  -f, --format=<fmt>
          fmt defines output format. Default format is '$ax'.
          Available fields:
          $ab - action's adapter block execution begin timestamp
          $ae - action's adapter block execution end timestamp
          $al - adapter log message (timestamp included)
          $aL - adapter log message payload (timestamp removed)
          $am - actions recognised by the model
          $as - action suggested to top-level adapter
          $at - action's adapter block execution time
          $ax - action actually executed in top-level adapter
          $mc - mapper adapter configuration
          $mn - mapper adapter number
          $ms - suggested action after renaming in mapper adapter
          $sn - number of test step
          $sb - coverage before the test step
          $sc - coverage after the test step
          $st - time stamp of test step
          $tg - tags at state
          $tv - test verdict: pass or fail
          $tr - reason for the verdict
          $tt - total test runtime [s]

  -s, --separator=<string>
          separator between values of multivalue fields,
          for instance $tg and $al. The default is '; '.

  -t, --time-format=<fmt>
          fmt defines how timestamps are formatted. See
          strftime manual for details. %f gives microseconds.

  -r, --raw
          do not decode actions

If logfile is not given, log is read from standard input.
"""

import sys
import getopt
import re
import urllib2
import fmbt_config
import datetime

VALUE_SEPARATOR = '; '

def identity_formatter(s):
    return s

def already_done_formatter_s(s):
    already_done_formatter_s.saved = s
    already_done_formatter_e.saved = s
    return None
already_done_formatter_s.saved = "undefined"

def already_done_formatter_e(s):
    already_done_formatter_e.saved = s
    return None
already_done_formatter_e.saved = "undefined"

def TAU_formatter(s):
   if s == "TAU": return "[unidentified action]"
   return s

def time_formatter(s):
    return _g_time_formatter(s)

def starttime_formatter(s):
    starttime_formatter.last = float(s)
    return _g_time_formatter(s)

def endtime_formatter(s):
    endtime_formatter.last = float(s)
    return _g_time_formatter(s)

def duration_formatter(s):
    endtime_formatter(s)
    if (hasattr(starttime_formatter, "last") and
        hasattr(endtime_formatter, "last")):
        duration = endtime_formatter.last - starttime_formatter.last
    else:
        duration = float("NaN")
    return "%.6f" % (duration,)

def remove_preceding_timestamp_formatter(s):
    m = remove_preceding_timestamp_formatter_re.match(s)
    if not m:
        return s
    return s[m.end():]
remove_preceding_timestamp_formatter_re=re.compile('[0-9]+\.[0-9]{4} ')

_g_time_format = None
_g_time_formatter = identity_formatter

fields = {
    '$ab' : ['<suggested_action type=', '"', 5, starttime_formatter],
    '$ae' : ['<action type=', '"', 5, endtime_formatter],
    '$ax' : ['<action type=', '"', 3, TAU_formatter],
    '$as' : ['<suggested_action type=', '"', 3, identity_formatter],
    '$am' : ['<action_name name=', '"', 1, identity_formatter],
    '$al' : ['<remote msg=', '"', 1, identity_formatter],
    '$aL' : ['<remote msg=', '"', 1, remove_preceding_timestamp_formatter],
    '$at' : ['<action type=', '"', 5, duration_formatter],
    '$ms' : ['<redirect id=', '"', 5, identity_formatter],
    '$mc' : ['<redirect id=', '"', 3, identity_formatter],
    '$mn' : ['<redirect id=', '"', 1, identity_formatter],
    '$sb' : ['<status steps=', '"', 3, already_done_formatter_s],
    '$sc' : ['<status steps=', '"', 3, identity_formatter],
    '$eb' : ['<status steps=', '"', 5, already_done_formatter_e],
    '$ec' : ['<status steps=', '"', 5, identity_formatter],
    '$sn' : ['<status steps=', '"', 1, identity_formatter],
    '$st' : ['<current_time time=', '"', 1, time_formatter],
    '$tg' : ['<tags enabled=', '"', 1, identity_formatter],
    '$tv' : ['<stop verdict=', '"', 1, identity_formatter],
    '$tr' : ['<stop verdict=', '"', 3, identity_formatter],
    '$tt' : ['<elapsed_time', '"', 1, identity_formatter]
}

def extract(input_file_obj, output_file_obj, output_format, raw):
    # FIXME: this is just a quick to get input action names
    # printed. What this really should do is:
    # 1. parse everything that is done during a single test step
    # 2. write the stuff in requested format to output_file_obj

    def pick(line, field_values):
        unique_prefix, delimiter, fieldindex, formatter = field_values
        if raw == 1:
            contents = line.split(delimiter)[fieldindex]
        else:
            try:
                if unique_prefix == "<tags enabled=":
                    values = [ formatter(urllib2.unquote(v))
                               for v in line.split(delimiter)[fieldindex].split(' ')]
                    contents = VALUE_SEPARATOR.join(values)
                else:
                    contents = formatter(urllib2.unquote(line.split(delimiter)[fieldindex]))
            except:
                contents = None
        return contents

    def clean_data():
        d = dict([(field, []) for field in fields])
        d['$sb'] = [already_done_formatter_s.saved]
        d['$eb'] = [already_done_formatter_e.saved]
        return d

    empty_row = output_format % dict([(field, '') for field in fields])

    parsed_data = clean_data()
    for lineno, line in enumerate(input_file_obj):
        for field in fields:
            match = fields[field][0]
            if match in line:
                found_value = pick(line, fields[field])
                if found_value != None:
                    parsed_data[field].append(found_value)

        # a test step done, print values
        ppoutput = ""
        if (('<status steps=' in line) or
            # ('<stop verdict' in line) or
            ('</test_engine>' in line)):
            printable_data = {}
            for field in parsed_data:
                if field != '$st': printable_data[field] = VALUE_SEPARATOR.join(parsed_data[field])
                elif parsed_data[field]: printable_data[field] = parsed_data[field][0]
            if not '<status steps="0"' in line:
                ppoutput = output_format % printable_data
            parsed_data = clean_data()
        elif ((parsed_data['$al'] != [] and '%($al)' in output_format) or
              (parsed_data['$aL'] != [] and '%($aL)' in output_format) or
              (parsed_data['$am'] != [] and '%($am)' in output_format)):
            # print immediately and only this
            printable_data = {}
            for field in parsed_data:
                if field == '$al' and parsed_data['$al']: printable_data[field] = parsed_data['$al'][0]
                elif field == '$aL' and parsed_data['$aL']: printable_data[field] = parsed_data['$aL'][0]
                elif field == '$am' and parsed_data['$am']: printable_data[field] = parsed_data['$am'][0]
                else: printable_data[field] = ''
            ppoutput = output_format % printable_data
            parsed_data['$al'] = []
            parsed_data['$aL'] = []
            parsed_data['$am'] = []
        if ppoutput != empty_row: output_file_obj.write(ppoutput)

if __name__ == '__main__':
    input_file_obj = sys.stdin
    output_file_obj = sys.stdout
    output_format = '$tv$ax'
    option_raw = 0

    opts, remainder = getopt.getopt(
        sys.argv[1:], 'hrf:o:s:t:v',
        ['help', 'raw', 'format=', 'output=', 'separator=', 'time-format=', 'version'])
    for opt, arg in opts:
        if opt in ['-h', '--help']:
            print __doc__
            sys.exit(0)
        elif opt in ['-V', '--version']:
            print "Version " + fmbt_config.fmbt_version + fmbt_config.fmbt_build_info
            sys.exit(0)
        elif opt in ['-r', '--raw']:
            option_raw = 1
        elif opt in ['-f', '--format']:
            output_format = arg
        elif opt in ['-s', '--separator']:
            VALUE_SEPARATOR = arg
        elif opt in ['-t', '--time-format']:
            _g_time_format = arg
            _g_time_formatter = lambda s: datetime.datetime.fromtimestamp(float(s)).strftime(_g_time_format)
        elif opt in ['-o', '--output'] and not arg in ['', '-']:
            output_file_obj = file(arg, 'w')

    output_format = output_format.replace('\\n', '\n').replace('\\t', '\t')
    for field in fields:
        output_format = output_format.replace(field,
                                              '%(' + field + ')s')
    output_format += '\n'

    if not remainder:
        extract(input_file_obj, output_file_obj, output_format, option_raw)

        try: input_file_obj.close()
        except: pass

    else:
        for logfilename in remainder:
            if logfilename != "-":
                input_file_obj = file(logfilename, "r")
            else:
                input_file_obj = sys.stdin

            extract(input_file_obj, output_file_obj, output_format, option_raw)

            try: input_file_obj.close()
            except: pass

    try: output_file_obj.close()
    except: pass
